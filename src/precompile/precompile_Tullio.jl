function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Core.kwftype(typeof(Tullio.Type)),Any,Type{Tullio.DotDict}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes},typeof(Tullio.dollarstrip),Tuple{Tuple{Expr, Expr}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Tullio.dollarstrip), Tuple{Tuple{Expr, Expr}}}})
    Base.precompile(Tuple{typeof(Base.setindex_widen_up_to),Vector{typeof(Tullio.subranges)},Expr,Int64})
    Base.precompile(Tuple{typeof(Tullio._trymatch),Any,Any})
    Base.precompile(Tuple{typeof(Tullio._trymatch),Expr,Union{Val{:ref}, Val{:curly}}})
    Base.precompile(Tuple{typeof(Tullio._tullio),Any,Vararg{Any}})
    Base.precompile(Tuple{typeof(Tullio._tullio),Any})
    Base.precompile(Tuple{typeof(Tullio.action_functions),Any})
    Base.precompile(Tuple{typeof(Tullio.arrayplusepsilon),Symbol,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.callcost),Symbol,Tullio.DotDict})
    Base.precompile(Tuple{typeof(Tullio.csewalk),Any,Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.csewalk),Expr,Dict,Vector{T} where T,Set})
    Base.precompile(Tuple{typeof(Tullio.illegal),Any,Any})
    Base.precompile(Tuple{typeof(Tullio.illegal),Expr,Any})
    Base.precompile(Tuple{typeof(Tullio.index_ranges),Any})
    Base.precompile(Tuple{typeof(Tullio.make_many_actors),Any,Any,Any,Vector{T} where T,Any,Vector{T} where T,Any,Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.make_many_actors),Any,Any,Any,Vector{T} where T,Any,Vector{T} where T,Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.output_array),Any})
    Base.precompile(Tuple{typeof(Tullio.padmodclamp_ind),Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.padmodclamp_ind),Expr,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.padmodclamp_pair),Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.padmodclamp_replace),Expr,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.parse_input),Any,Any})
    Base.precompile(Tuple{typeof(Tullio.parse_ranges),Any,Any})
    Base.precompile(Tuple{typeof(Tullio.postwalk),Any,Any})
    Base.precompile(Tuple{typeof(Tullio.range_expr_walk),Any,Expr,Any})
    Base.precompile(Tuple{typeof(Tullio.resolveintersect),Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.resolvestrict),Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.saveconstraints),Any,Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.simplitimes),Number,Any})
    Base.precompile(Tuple{typeof(Tullio.tidyleftraw),Any,Any})
    Base.precompile(Tuple{typeof(Tullio.walk),Any,Any,Any})
    Base.precompile(Tuple{typeof(Tullio.walk),Expr,Any,Any})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Tullio.dollarstrip), Tuple{Tuple{Expr, Expr}}}})
    isdefined(Tullio, Symbol("#113#114")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#113#114")),Any})
    isdefined(Tullio, Symbol("#139#141")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#139#141")),Any})
    isdefined(Tullio, Symbol("#140#142")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#140#142")),Any})
    isdefined(Tullio, Symbol("#23#24")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#23#24")),Any})
    isdefined(Tullio, Symbol("#25#26")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#25#26")),Any})
    isdefined(Tullio, Symbol("#31#34")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#31#34")),Any})
    isdefined(Tullio, Symbol("#37#38")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#37#38")),Any})
    isdefined(Tullio, Symbol("#39#40")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#39#40")),Any})
    isdefined(Tullio, Symbol("#59#62")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#59#62")),Any})
    isdefined(Tullio, Symbol("#61#64")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#61#64")),Any,Any})
    isdefined(Tullio, Symbol("#65#67")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#65#67")),Any})
    isdefined(Tullio, Symbol("#66#68")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#66#68")),Any})
    isdefined(Tullio, Symbol("#75#77")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#75#77")),Any})
    isdefined(Tullio, Symbol("#76#78")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#76#78")),Any})
    isdefined(Tullio, Symbol("#79#84")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#79#84")),Any})
    isdefined(Tullio, Symbol("#80#85")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#80#85")),Any})
    isdefined(Tullio, Symbol("#81#86")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#81#86")),Any})
    isdefined(Tullio, Symbol("#82#87")) && Base.precompile(Tuple{getfield(Tullio, Symbol("#82#87")),Any,Any})
end
